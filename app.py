# -*- coding: utf-8 -*-

from flask import Flask, request, jsonify, render_template
from flask_cors import CORS
from werkzeug.security import generate_password_hash, check_password_hash
import uuid
import datetime
import firebase_admin
from firebase_admin import credentials, firestore, storage
import jwt  # PyJWT library
import base64

# --- Flask роЪрпЖропро▓ро┐ропрпИ роЕроорпИродрпНродро▓рпН ---
app = Flask(__name__)
# роорпБроХрпНроХро┐ропроорпН: рокро╛родрпБроХро╛рокрпНрокрпБ роХро╛ро░рогроЩрпНроХро│рпБроХрпНроХро╛роХ роЗроирпНрод SECRET_KEY-роР роЪро┐роХрпНроХро▓ро╛рой, роирпАро│рооро╛рой роТройрпНро▒ро╛роХ рооро╛ро▒рпНро▒ро╡рпБроорпН.
app.config['SECRET_KEY'] = 'change-this-to-a-very-long-and-random-secret-key'
CORS(app)

# --- Firebase роЕроорпИродрпНродро▓рпН ---
try:
    # serviceAccountKey.json роХрпЛрокрпНрокрпБ роЙроЩрпНроХро│рпН app.py роЗро░рпБроХрпНроХрпБроорпН роЗроЯродрпНродро┐ро▓рпЗропрпЗ роЗро░рпБроХрпНроХ ро╡рпЗрогрпНроЯрпБроорпН.
    cred = credentials.Certificate("serviceAccountKey.json")
    
    # роорпБроХрпНроХро┐ропроорпН: 'your-project-id.appspot.com' роОройрпНрокродрпИ роЙроЩрпНроХро│рпН Firebase Storage рокроХрпНроХродрпНродро┐ро▓рпН роЙро│рпНро│ URL роЙроЯройрпН рооро╛ро▒рпНро▒ро╡рпБроорпН.
    firebase_admin.initialize_app(cred, {
        'storageBucket': 'your-project-id.appspot.com' 
    })
    
    # Firestore рооро▒рпНро▒рпБроорпН Storage-роР роЗрогрпИроХрпНроХро┐ро▒рпЛроорпН
    db = firestore.client()
    bucket = storage.bucket()
    print("тЬЕ Firebase ро╡рпЖро▒рпНро▒ро┐роХро░рооро╛роХ роЗрогрпИроХрпНроХрокрпНрокроЯрпНроЯродрпБ.")
except Exception as e:
    print(f"ЁЯФе Firebase-роР роЗрогрпИрокрпНрокродро┐ро▓рпН роЪро┐роХрпНроХро▓рпН: {e}")
    db = None
    bucket = None
# -----------------------------

# --- HTML рокроХрпНроХроЩрпНроХро│рпБроХрпНроХро╛рой ро╡ро┤ро┐роХро│рпН (Routes) ---
@app.route('/')
def index():
    return render_template('index.html')

# роЗроирпНрод ро╡ро┤ро┐роХро│рпН роЙроЩрпНроХро│рпБроХрпНроХрпБ родройро┐ login/register рокроХрпНроХроЩрпНроХро│рпН роЗро░рпБроирпНродро╛ро▓рпН родрпЗро╡рпИ.
# @app.route('/login')
# def login_page():
#     return render_template('login.html')

# @app.route('/register')
# def register_page():
#     return render_template('register.html')

# --- API Routes ---

# 1. рокропройро░рпН рокродро┐ро╡рпБ роЪрпЖропрпНро╡родро▒рпНроХро╛рой ро╡ро┤ро┐
@app.route('/api/register', methods=['POST'])
def register_user():
    if not db: return jsonify({'message': 'Database роЗрогрпИроХрпНроХрокрпНрокроЯро╡ро┐ро▓рпНро▓рпИ.'}), 500
    data = request.get_json()
    if not data or not data.get('email') or not data.get('password') or not data.get('name'):
        return jsonify({'message': 'Name, Email рооро▒рпНро▒рпБроорпН Password родрпЗро╡рпИ.'}), 400

    email = data['email']
    password = data['password']
    name = data['name']
    
    users_ref = db.collection('users')
    
    # роЗроирпНрод email роПро▒рпНроХройро╡рпЗ роЙро│рпНро│родро╛ роОрой роЪро░ро┐рокро╛ро░рпНроХрпНроХро┐ро▒рпЛроорпН
    if users_ref.document(email).get().exists:
        return jsonify({'message': 'роЗроирпНрод Email роПро▒рпНроХройро╡рпЗ рокродро┐ро╡рпБ роЪрпЖропрпНропрокрпНрокроЯрпНроЯрпБро│рпНро│родрпБ.'}), 409

    # роХроЯро╡рпБроЪрпНроЪрпКро▓рпНро▓рпИ рокро╛родрпБроХро╛рокрпНрокро╛роХ hash роЪрпЖропрпНроХро┐ро▒рпЛроорпН
    hashed_password = generate_password_hash(password, method='pbkdf2:sha256')
    
    new_user = { 
        'name': name,
        'email': email, 
        'password_hash': hashed_password, 
        'created_at': datetime.datetime.utcnow().isoformat() 
    }
    users_ref.document(email).set(new_user)
    
    # рокродро┐ро╡рпБ роЪрпЖропрпНродро╡рпБроЯройрпН, рокропройро░рпИ родро╛ройро╛роХ роЙро│рпНроирпБро┤рпИроп ро╡рпИроХрпНроХ Token роЙро░рпБро╡ро╛роХрпНроХрпБроХро┐ро▒рпЛроорпН
    token = jwt.encode({
        'email': email,
        'exp': datetime.datetime.utcnow() + datetime.timedelta(hours=24) # 24 роорогро┐роирпЗро░роорпН роЪрпЖро▓рпНро▓рпБрокроЯро┐ропро╛роХрпБроорпН
    }, app.config['SECRET_KEY'], algorithm="HS256")
    
    return jsonify({'message': 'рокропройро░рпН ро╡рпЖро▒рпНро▒ро┐роХро░рооро╛роХ рокродро┐ро╡рпБ роЪрпЖропрпНропрокрпНрокроЯрпНроЯро╛ро░рпН!', 'token': token, 'name': name}), 201

# 2. рокропройро░рпН роЙро│рпНроирпБро┤рпИро╡родро▒рпНроХро╛рой ро╡ро┤ро┐
@app.route('/api/login', methods=['POST'])
def login_user():
    if not db: return jsonify({'message': 'Database роЗрогрпИроХрпНроХрокрпНрокроЯро╡ро┐ро▓рпНро▓рпИ.'}), 500
    data = request.get_json()
    if not data or not data.get('email') or not data.get('password'):
        return jsonify({'message': 'Email рооро▒рпНро▒рпБроорпН Password родрпЗро╡рпИ.'}), 400

    email, password = data['email'], data['password']
    user_doc_ref = db.collection('users').document(email)
    user_doc = user_doc_ref.get()

    if not user_doc.exists or not check_password_hash(user_doc.to_dict()['password_hash'], password):
        return jsonify({'message': 'родро╡ро▒ро╛рой Email роЕро▓рпНро▓родрпБ Password.'}), 401
    
    # роЙро│рпНроирпБро┤рпИро╡рпБ ро╡рпЖро▒рпНро▒ро┐роХро░рооро╛роХ роЗро░рпБроирпНродро╛ро▓рпН Token роЙро░рпБро╡ро╛роХрпНроХрпБроХро┐ро▒рпЛроорпН
    token = jwt.encode({
        'email': email,
        'exp': datetime.datetime.utcnow() + datetime.timedelta(hours=24)
    }, app.config['SECRET_KEY'], algorithm="HS256")
    
    user_data = user_doc.to_dict()
    return jsonify({'message': 'роЙро│рпНроирпБро┤рпИро╡рпБ ро╡рпЖро▒рпНро▒ро┐!', 'token': token, 'name': user_data.get('name')}), 200

# 3. рокро╛родрпБроХро╛роХрпНроХрокрпНрокроЯрпНроЯ ро╡ро┤ро┐роХро│рпБроХрпНроХро╛рой Token роЪро░ро┐рокро╛ро░рпНрокрпНрокрпБ (Decorator)
def token_required(f):
    def decorated(*args, **kwargs):
        token = None
        if 'Authorization' in request.headers:
            # Header 'Bearer <token>' ро╡роЯро┐ро╡родрпНродро┐ро▓рпН роЗро░рпБроХрпНроХрпБроорпН
            token = request.headers['Authorization'].split(" ")[1]
        
        if not token: 
            return jsonify({'message': 'роЕроЩрпНроХрпАроХро╛ро░ Token роЗро▓рпНро▓рпИ!'}), 401
        
        try:
            # Token роЪро░ро┐ропро╛ройродро╛ роОрой роЪро░ро┐рокро╛ро░рпНроХрпНроХро┐ро▒рпЛроорпН
            data = jwt.decode(token, app.config['SECRET_KEY'], algorithms=["HS256"])
            current_user_email = data['email']
        except Exception:
            return jsonify({'message': 'Token родро╡ро▒ро╛ройродрпБ роЕро▓рпНро▓родрпБ роХро╛ро▓ро╛ро╡родро┐ропро╛ройродрпБ!'}), 401
        
        return f(current_user_email, *args, **kwargs)
    
    decorated.__name__ = f.__name__
    return decorated

# 4. рокрпБроХро╛ро░рпНроХро│рпИрокрпН рокродро┐ро╡рпБ роЪрпЖропрпНро╡родро▒рпНроХро╛рой ро╡ро┤ро┐ (рокро╛родрпБроХро╛роХрпНроХрокрпНрокроЯрпНроЯродрпБ)
@app.route('/api/report', methods=['POST'])
@token_required
def handle_report(current_user_email):
    if not db or not bucket: return jsonify({'message': 'Database/Storage роЗрогрпИроХрпНроХрокрпНрокроЯро╡ро┐ро▓рпНро▓рпИ.'}), 500
    
    data = request.get_json()
    if not data or not data.get('description') or not data.get('category') or not data.get('location'):
        return jsonify({'message': 'родрпЗро╡рпИропро╛рой р┤╡р┤┐р┤╡р┤░роЩрпНроХро│рпН роЗро▓рпНро▓рпИ.'}), 400
    
    image_data_url = data.get('photo')
    image_url = ''
    
    # Base64 рокроЯродрпНродрпИрокрпН рокрпЖро▒рпНро▒рпБ Firebase Storage-ро▓рпН роЪрпЗрооро┐роХрпНроХро┐ро▒рпЛроорпН
    if image_data_url and image_data_url.startswith('data:image'):
        try:
            header, encoded = image_data_url.split(",", 1)
            image_format = header.split("/")[1].split(";")[0]
            image_data = base64.b64decode(encoded)
            
            # рокроЯродрпНродро┐ро▒рпНроХрпБ роТро░рпБ родройро┐родрпНродрпБро╡рооро╛рой рокрпЖропро░рпИ роЙро░рпБро╡ро╛роХрпНроХрпБроХро┐ро▒рпЛроорпН
            image_filename = f"reports/{uuid.uuid4()}.{image_format}"
            blob = bucket.blob(image_filename)
            
            blob.upload_from_string(image_data, content_type=f'image/{image_format}')
            blob.make_public() # рокроЯродрпНродрпИ рокрпКродрпБро╡ро┐ро▓рпН роЕрогрпБроХрпБроорпНрокроЯро┐ рооро╛ро▒рпНро▒рпБроХро┐ро▒рпЛроорпН
            image_url = blob.public_url
        except Exception as e:
            print(f"ЁЯФе рокроЯродрпНродрпИрокрпН рокродро┐ро╡рпЗро▒рпНро▒рпБро╡родро┐ро▓рпН роЪро┐роХрпНроХро▓рпН: {e}")
            image_url = '' # роЪро┐роХрпНроХро▓рпН роПро▒рпНрокроЯрпНроЯро╛ро▓рпН ркЦрк╛рк▓рлА URL
            
    report_id = str(uuid.uuid4())
    
    # рокрпБроХро╛ро░рпИ Firestore-ро▓рпН роЪрпЗрооро┐роХрпНроХро┐ро▒рпЛроорпН
    new_report = {
        'report_id': report_id,
        'description': data['description'],
        'category': data['category'],
        'location': data['location'],
        'place': data.get('place', 'родрпЖро░ро┐ропро╡ро┐ро▓рпНро▓рпИ'),
        'timestamp': datetime.datetime.utcnow().isoformat(),
        'status': 'received', # рокрпБроХро╛ро░ро┐ройрпН родро▒рпНрокрпЛродрпИроп роиро┐ро▓рпИ
        'reported_by': current_user_email, # рокрпБроХро╛ро░ро│ро┐родрпНродро╡ро░рпН ропро╛ро░рпН?
        'photo_url': image_url # рокроЯродрпНродро┐ройрпН URL
    }
    
    db.collection('reports').document(report_id).set(new_report)
    print(f"рокрпБродро┐роп рокрпБроХро╛ро░рпН {current_user_email} роорпВро▓роорпН рокрпЖро▒рокрпНрокроЯрпНроЯродрпБ: {report_id}")
    return jsonify({'message': 'рокрпБроХро╛ро░рпН ро╡рпЖро▒рпНро▒ро┐роХро░рооро╛роХ роЪрооро░рпНрокрпНрокро┐роХрпНроХрокрпНрокроЯрпНроЯродрпБ!', 'report_id': report_id}), 201

# 5. роОро▓рпНро▓ро╛ рокрпБроХро╛ро░рпНроХро│рпИропрпБроорпН рокрпЖро▒рпБро╡родро▒рпНроХро╛рой ро╡ро┤ро┐ (рокрпКродрпБ)
@app.route('/api/reports', methods=['GET'])
def get_reports():
    if not db: return jsonify({'message': 'Database роЗрогрпИроХрпНроХрокрпНрокроЯро╡ро┐ро▓рпНро▓рпИ.'}), 500
    try:
        # рокрпБроХро╛ро░рпНроХро│рпИ роЪроорпАрокродрпНродро┐ропродрпБ роорпБродро▓ро┐ро▓рпН ро╡ро░рпБрооро╛ро▒рпБ ро╡ро░ро┐роЪрпИрокрпНрокроЯрпБродрпНродрпБроХро┐ро▒рпЛроорпН
        docs_stream = db.collection('reports').order_by('timestamp', direction=firestore.Query.DESCENDING).stream()
        reports_list = [doc.to_dict() for doc in docs_stream]
        return jsonify(reports_list), 200
    except Exception as e:
        return jsonify({'message': f'рокрпБроХро╛ро░рпНроХро│рпИрокрпН рокрпЖро▒рпБро╡родро┐ро▓рпН роЪро┐роХрпНроХро▓рпН: {e}'}), 500

if __name__ == '__main__':
    app.run(host='0.0.0.0', port=5000, debug=True)